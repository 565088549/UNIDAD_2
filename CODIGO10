#include <stdio.h>
#include <ctype.h>
#include <string.h>
#include <stdlib.h>
/* Definicion de la longitud maxima de una palabra */
#define TAM 30
/* Definicion de las estructuras de datos del programa */
struct ARBOL
{
 char pal[TAM+1];
 struct ARBOL *izq,*der;
};
/* Rutina que lee una palabra del fichero.
Parametros: FILE *fichero Puntero al fichero de donde se leen las
palabras.
 char *cadena Array de caracteres donde almacenar las
palabras.
Return: char * Puntero a la cadena con la palabra leida, NULL si
error. */
char *LeerPalabra(FILE *fichero,char *cadena)
{
 register char d,i=0;
 while ((d=fgetc(fichero))!=EOF && !isalpha(d));
 if (d==EOF)
 return NULL;
 do
 cadena[i++]=d;
 while (i<TAM && (isalpha(d=fgetc(fichero)) || isdigit(d) ||
 d=='_'));
 cadena[i]='\0';
 return cadena;
}
/* Rutina que crea el arbol binario, leyendo para ello el fichero.
Parametros: char *nombre Nombre del fichero a leer.
Return: struct ARBOL * Puntero a la raiz del arbol creado, NULL si
error. */
struct ARBOL *LeerFichero(char *nombre)
{
 FILE *fichero;
 char cadena[TAM+1],insertado;
 int val;
 struct ARBOL *cab=NULL,*p,*q;
 if ((fichero=fopen(nombre,"rt"))==NULL)
 {
 printf("\nError, no puedo leer el fichero: %s\n",nombre);
 return(NULL);
 }
 while (LeerPalabra(fichero,cadena)!=NULL)
 {
 if ((q=(struct ARBOL *)malloc(sizeof(struct ARBOL)))==NULL)
 {
printf("\nError reservando memoria.\n");
 fclose(fichero);
 return NULL;
 }
 strcpy(q->pal,cadena);
 q->izq=q->der=NULL;
 if (cab==NULL)
 cab=q;
 else
 {
 p=cab;
 insertado=0;
 while (!insertado)
 if ((val=strcmp(cadena,p->pal))<0)
 if (p->izq==NULL)
 {
 p->izq=p;
 insertado=1;
 }
 else
 p=p->izq;
 else
 if (val>0)
 if (p->der==NULL)
{
 p->der=q;
insertado=1;
 }
else
 p=p->der;
 else
 insertado=1;
 }
 }
 fclose(fichero);
 return cab;
}
/* Rutina que muestra por pantalla el arbol ordenado a la vez que
libera la memoria.
Parametros: struct ARBOL *p Puntero al nodo a mostrar.
 unsigned *cont Puntero al contador de elementos para
permitir parar la visualizacion.
Return: Ninguno.
*/
void Mostrar(struct ARBOL *p,unsigned *cont)
{
 if (p->izq!=NULL)
 Mostrar(p->izq,cont);
 puts(p->pal);
 if (++*cont>21)
 {
 *cont=1;
 printf("\nPulsa Enter para continuar.\n");
 getchar();
 }
 if (p->der!=NULL)
Mostrar(p->der,cont);
 free(p);
}
int main(int argc,char *argv[])
{
 struct ARBOL *p;
 unsigned cont=1;
 if (argc!=2)
 {
 printf("\nModo de uso: %s <fichero>\n",argv[0]);
 return 1;
 }
 if ((p=LeerFichero(argv[1]))==NULL)
 return 1;
 printf("\n\n\n\n\n\n");
 Mostrar(p,&cont);
 return 0;
}
