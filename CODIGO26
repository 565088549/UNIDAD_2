#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include <conio.h>
#define MAX_LEN 80
#define MAX_PERS 200
#define MAX_LONG_NIF 10
typedef struct
 {
 char *nombre;
 char *apellido;
 char nif[MAX_LONG_NIF];
 int edad;
 } PERSONA;
PERSONA persona[MAX_PERS], *pPersona=NULL;
typedef enum { OK = 1, ERR = 0} status;
void ayuda(void);
status LeerArchivo(char *archivo[], PERSONA *pp, int *pTop);
status ControlErrores(char *pNombre, char *pApellido, char *pNif, char
*pEdad);
status CadenaVacia(char *caracter);
status EsDigito(char *caracter, int longitud);
int PasaAEntero(char *caracter, int maximo, PERSONA *pDatos);
void MostrarDatos(PERSONA *pp, int linea);
status LiberarPersona(PERSONA *);
status LiberarArray(PERSONA *pp, int *top);
int main(int argc, char *argv[])
{
 int top=0; /* Numero de personas leidas */
 clrscr();
 pPersona = persona; /* Puntero que apunta a una estructura de tipo PERSONA */
 /* Se debe introducir: <nombre del ejecutable> <nombre del archivo> */
 if (argc != 2)
 {
 ayuda(); /* Mensaje de ayuda para el usuario */
 return ERR;
 }
 if (LeerArchivo(&argv[1], pPersona, &top) == ERR)
 {
 printf("\nRevise el fichero, se produjo un fallo al intentar leerle.\n");
 return ERR;
 }
 return OK;
}
/*****************************************************************************
*
* Funcion: void ayuda(void)
*
* IN:
* OUT: Mensaje de ayuda para el usuario.
* MAKE: Muestra ayuda al usuario para que introduzca los datos
* correctamente.
*
*****************************************************************************/
void ayuda(void)
{
 printf("Uso del programa: <nombre del ejecutable> <nombre del archivo>");
} 
/*****************************************************************************
*
* Funcion: status LeerArchivo(char *archivo[], PERSONA *pp, int *pTop)
*
* IN: Nombre del archivo, puntero a una estructura de tipo PERSONA y maximo
* numero de personas.
* OUT: OK si se ha leido correctamente, ERR si ha habido algun fallo
* MAKE: Lee un archivo introducido por el usuario.
*
*****************************************************************************/
status LeerArchivo(char *archivo[], PERSONA *pp, int *pTop)
{
 FILE *fp;
 int inicio=0; /* Posicion en el array de estructuras */
 char cad[MAX_LEN]; /* Cadena con la que leemos las lineas del fichero */
 char nombre[MAX_LEN];
 char apellido[MAX_LEN];
 char nif[MAX_LEN];
 char edad[MAX_LEN];
 if (!(fp = fopen(archivo[0], "r")))
 {
 printf("\nError al intentar abrir el archivo\n");
 return ERR;
 }
 while (!feof(fp))
 {
 if (*pTop == MAX_PERS)
 /* Si se va a superar la dimension de la tabla definida*/
 {
 printf("\n\nSe ha sobrepasado el limite de PERSONAS.\n");
 return ERR;
 }
 pp=&persona[inicio];
 fgets(cad, MAX_LEN, fp);
 if (cad[0]=='\n')
 {
 printf("\n\nNo puede dejar lineas en blanco.");
 return ERR;
 }
 sscanf(cad, "%s %s %s %s", nombre, apellido, nif, edad);
 if(ControlErrores(nombre, apellido, nif, edad) == ERR)
 {
 printf("\nHa ocurrido un error al leer los datos.\n");
 return ERR;
 }
 /* Reservamos memoria y asignamos los valores */
 pp->nombre = (char *) malloc((strlen(nombre) + 1) * sizeof(char));
 strcpy(pp->nombre, nombre);
 pp->apellido = (char *) malloc((strlen(apellido) + 1) * sizeof(char));
 strcpy(pp->apellido, apellido);
 strcpy(pp->nif, nif);
 if (!feof(fp)) /* Si no hemos llegado al final del archivo... */
 {
 pp->edad = PasaAEntero(edad, 2, pp);
 if (pp->edad == ERR)
 return ERR;
 MostrarDatos(pp, inicio);
 inicio++; /* Pasamos a la siguiente estructura de tipo PERSONA */
(*pTop)++;
 }
 }
 if (LiberarArray(pp, pTop) == ERR)
 return ERR;
 fclose(fp);
 return OK;
}
/*****************************************************************************
*
* Funcion: status ControlErrores(char *pNombre, char *pApellido, char *pNif,
* char *pEdad)
*
* IN: Nombre, Apellido, NIF y Edad como cadena de caracteres
* OUT: OK si las cadenas no contienen fallos, ERR si existe algun error
* MAKE: Chequea que las cadenas no contengan datos no permitidos.
*
*****************************************************************************/
status ControlErrores(char *pNombre, char *pApellido, char *pNif, char *pEdad)
{
 #define LONG_NIF 8
 /*Unico valor permitido para el numero de digitos del NIF */
 #define MAX_LONG_DATOS 17 /* Longitud maxima del nombre y del apellido */
 int i;
 if (strlen(pNombre) > MAX_LONG_DATOS)
 {
 printf("\n\nLa longitud del nombre que se estaba leyendo es demasidado
grande.");
 return ERR;
 }
 if (strlen(pApellido) > MAX_LONG_DATOS)
 {
 printf("\n\nLa longitud del apellido que se estaba leyendo es demasidado
 grande.");
 return ERR;
 }
 if (strlen(pNif) != LONG_NIF)
 {
 printf("\n\nEl NIF debe tener 8 digitos.");
 return ERR;
 }
 if(EsDigito(pNif, (int) strlen(pNif)) == ERR)
 {
 printf("\n\nError al leer el NIF de %s %s.", pNombre, pApellido);
 return ERR;
 }
 if (*pEdad == '0')
 {
 printf("\n\nSe ha leido una edad incorrecta. No puede tener 0 a√±os.");
 return ERR;
 }
 for (i=0; i<strlen(pEdad); i++)
 {
 if (!isdigit(pEdad[i]))
 {
 printf("\n\nSe realizo una operacion no valida mientras se leia el
 archivo.\n");
 return ERR;
 }
 } 
return OK;
}
/*****************************************************************************
*
* Funcion: status CadenaVacia(char *caracter)
*
* IN: Una cadena de caracteres
* OUT: OK si la cadena esta vacia, ERR si la cadena contiene algun elemento
* MAKE: Comprueba si la cadena esta vacia
*
*****************************************************************************/
status CadenaVacia(char *caracter)
{
 if (caracter[0] == 0)
 {
 printf("\nNo puede dejarlo en blanco, debe introducir los datos");
 return OK;
 }
 return ERR;
}
/*********************************************************
* Funcion: status EsDigito(char *caracter, int longitud)
*
* IN: Se le da una serie de caracteres para que compruebe si es un numero
* OUT: Nos devolvera ERR si se produce algun fallo, OK si es correcto
* MAKE: Comprueba la integridad de los datos
*
**********************************************************/
status EsDigito(char *caracter, int longitud)
{
 int i=0;
 if (CadenaVacia(caracter) == OK)
 return ERR;
 /* Comprobamos que todos los elementos sean digitos */
 for (i = i; i < longitud; i++)
 if (caracter[i] < '0' || caracter[i] > '9')
 {
 printf("\n\nIntroduzca unicamente digitos, por favor.");
 return ERR;
 }
 return OK;
}
/*****************************************************************************
*
* Funcion: int PasaAEntero(char *caracter, int maximo)
*
* IN: Cadena de caracteres que tenemos que pasar a entero y maximo de
* digitos permitidos.
* OUT: El numero pasado a entero o ERR si hay algun fallo.
* MAKE: Pasa una cadena de caracteres a entero.
*
*****************************************************************************/
int PasaAEntero(char *caracter, int maximo, PERSONA *pDatos)
{
 int num=0;
 int i;
 if (strlen(caracter) > maximo)
 { 
printf("\n\n%s %s es muy mayor!!!", pDatos->nombre, pDatos->apellido);
 return ERR;
 }
 /* Si solo se ha introducido un caracter */
 if (strlen(caracter) == 1)
 return num = caracter[0] - '0'; /*Devolvemos el digito */
 /* Si hay mas de un caracter */
 for (i = 0; i != (int) strlen(caracter); i++)
 num = (num * 10) + (caracter[i] - '0');
 return num;
}
/*****************************************************************************
*
* Funcion: void MostrarDatos(PERSONA *pp, int linea)
*
* IN: Puntero a una estructura de tipo PERSONA y la linea en que debemos
* ir escribiendo.
* OUT:
* MAKE: Muestra por pantalla los datos de la estructura.
*
*****************************************************************************/
void MostrarDatos(PERSONA *pp, int linea)
{
 gotoxy( 3,linea+1); printf("USUARIO: %s", pp->nombre);
 gotoxy(32,linea+1); printf("%s", pp->apellido);
 gotoxy(52,linea+1); printf("NIF: %s", pp->nif);
 gotoxy(70,linea+1); printf("EDAD: %d", pp->edad);
}
/*****************************************************************************
*
* Funcion: int LiberarPersona(PERSONA *pp)
*
* IN: Puntero a una estructura de tipo PERSONA.
* OUT: OK si se liberan correctamente, ERR si hay algun error.
* MAKE: Libera la memoria que reservamos anteriormente.
*
*****************************************************************************/
status LiberarPersona(PERSONA *pp)
{
 if(!pp->nombre || !pp->apellido) /* Si alguno es un puntero nulo */
 {
 printf("\n\nError al liberar el puntero");
 return ERR;
 }
 else
 {
 free(pp->nombre);
 free(pp->apellido);
 }
 return OK;
}
/*****************************************************************************
*
* Funcion: int LiberarArray(PERSONA *pp, int *pTop)
*
* IN: Puntero a una estructura de tipo PERSONA y el numero de elementos.
* OUT: OK
* MAKE: Libera cada parte de la estructura que le pasamos.
* 
*****************************************************************************/
status LiberarArray(PERSONA *pp, int *pTop)
{
 int i;
 for (i = 0; i < *pTop; i++)
 {
 LiberarPersona(--pp);
 }
 return OK;
}
