#include <stdio.h>
/* Definicion del tama√±o maximo */
#define TAM 10
/* Definicion de los codigos de error */
#define OK 0
#define ERROR 1
/* Definicion de la estructura de datos */
struct MATRIZ
{
 unsigned fila,columna;
 float matriz[TAM][TAM];
};
/* Rutina que muestra un menu y pide una opcion del menu.
Parametros: Ninguno.
Return: char Opcion del menu elegida. */
char Menu(void)
{
 register char d;
 printf("\nElige la opcion deseada:\n");
 printf("\t0 -- Salir del programa.\n");
 printf("\t1 -- Cambiar la matriz A.\n");
 printf("\t2 -- Cambiar la matriz B.\n");
 printf("\t3 -- Calcular A*B\n");
 printf("\t4 -- Calcular B*A\n");
 while ((d=getchar())<'0' || d>'4');
 return d;
}
/* Rutina que pide el numero de filas o de columnas de una matriz.
Parametros: char *cadena Puntero al string a mostrar.
Return: unsigned Numero de filas o de columnas. */
unsigned PedirTamano(const char *cadena)
{
 unsigned valor;
 do
 {
 printf("%s",cadena);
 scanf("%u",&valor);
 }
 while (valor==0 || valor>TAM);
 return valor;
}
/* Rutina que cambia una matriz.
Parametros: struct MATRIZ *a Puntero a la matriz que vamos a cambiar.
Return: Ninguno. */
void PedirMatriz(struct MATRIZ *a)
{
 register unsigned i,j;
 float valor;
a->fila=PedirTamano("\nNumero de filas de la matriz: ");
 a->columna=PedirTamano("\nNumero de columnas de la matriz: \n");
 for(i=0;i<a->fila;i++)
 for(j=0;j<a->columna;j++)
 {
 printf("M[%u][%u]: ",i,j);
 scanf("%f",&valor);
 a->matriz[i][j]=valor;
 }
}
/* Rutina que multiplica dos matrices. Las matrices se pasan por
puntero pues ello es mas rapido, aunque no se modifican en toda la
funcion.
Parametros: struct MATRIZ *a Puntero a la estructura con la primera
matriz a multiplicar.
 struct MATRIZ *b Puntero a la estructura con la segunda
matriz a multiplicar.
 struct MATRIZ *res Puntero a la estructura que contendra
el resultado.
Return: int Codigo de error. */
int Multiplicar(const struct MATRIZ *a,const struct MATRIZ *b,struct
MATRIZ *res)
{
 register unsigned i,j,k;
 if (a->columna!=b->fila)
 return ERROR;
 res->fila=a->fila;
 res->columna=b->columna;
 for(i=0;i<a->fila;i++)
 for(j=0;j<b->columna;j++)
 {
 res->matriz[i][j]=0;
 for(k=0;k<a->fila;k++)
 res->matriz[i][j]+=a->matriz[i][k]*b->matriz[k][j];
 }
 return OK;
}
/* Rutina que muestra en pantalla el resultado de la operacion.
Parametros: struct MATRIZ *res Puntero a la estructura con el
resultado.
Return: Ninguno. */
void Mostrar(const struct MATRIZ *res)
{
 register unsigned i,j;
 for(i=0;i<res->fila;i++)
 {
 for(j=0;j<res->columna;j++)
 printf("Res[%u][%u]= %f\n",i,j,res->matriz[i][j]);
 printf("\nPulsa Enter para continuar.\n");
 getchar();
 }
}
int main(void)
{
 struct MATRIZ a,b,res;
 char d;
 a.fila=a.columna=b.fila=b.columna=1;
 a.matriz[0][0]=b.matriz[0][0]=1.0;
 do
 switch(d=Menu())
 {
 case '0':break;
 case '1':PedirMatriz(&a);
 break;
 case '2':PedirMatriz(&b);
 break;
 case '3':
 if (Multiplicar(&a,&b,&res)==ERROR)
 printf("\nNo es posible multiplicar A*B\n");
 else
 Mostrar(&res);
 break;
 case '4':
 if (Multiplicar(&b,&a,&res)==ERROR)
 printf("\nNo es posible multiplicar B*A\n");
 else
 Mostrar(&res);
 break;
 }
 while (d!='0');
 return 0;
}
