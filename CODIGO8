#include <stdio.h>
#include <stdlib.h>
/* Rutina que lee el fichero de datos y devuelve un puntero al array
de la memoria reservada.
Parametros: char *nombre Nombre del fichero a leer.
 unsigned *num Puntero al unsigned que contendra el numero
de elementos del array.
Return: float * Puntero al array de float, NULL si sucede un error. */
float *LeerFichero(const char *nombre, unsigned *num)
{
 FILE *fp;
 float *p;
 register unsigned i;
if ((fp=fopen(nombre,"rt"))==NULL)
 {
 printf("\nError, no puedo abrir el fichero: %s\n",nombre);
 return NULL;
 }
 fscanf(fp,"%u\n",num);
 if ((p=(float *)calloc(*num,sizeof(float)))==NULL)
 {
 printf("\nError, memoria insuficiente.\n");
 fclose(fp);
 return NULL;
 }
 for(i=0;i<*num;i++)
 fscanf(fp,"%f\n",&p[i]);
 fclose(fp);
 return p;
}
/* Rutina que escribe el fichero de datos ordenado.
Parametros: char *nombre Nombre del fichero donde guardar los datos.
 unsigned num Numero de elementos del array.
 float *p Puntero al array ordenado.
Return: Ninguno. */
void GuardarFichero(const char *nombre,const unsigned num,const float
*p)
{
 FILE *fp;
 register unsigned i;
 if ((fp=fopen(nombre,"wt"))==NULL)
 {
 printf("\nError, no puedo crear el fichero: %s\n",nombre);
 return;
 }
 fprintf(fp,"%u\n",num);
 for(i=0;i<num;i++)
 fprintf(fp,"%f\n",p[i]);
 fclose(fp);
}
/* Rutina que ordena un array segun el algoritmo Quick-Sort.
Parametros: float *p Puntero al array a ordenar.
 unsigned izq Elemento de la izquierda a ordenar.
 unsigned der Elemento de la derecha a ordenar.
Return: Ninguno. */
void QuickSort(float *p,unsigned izq,unsigned der)
{
 register unsigned i=izq,j=der;
 float val,inter;
 val=p[(i+j)/2];
 do
 {
 while (p[i]<val) i++;
 while (p[j]>val) j--;
 if (i<=j)
{
 inter=p[i];
 p[i]=p[j];
 p[j]=inter;
 i++;
 j--;
 }
 }
 while (i<=j);
 if (izq<j) QuickSort(p,izq,j);
 if (i<der) QuickSort(p,i,der);
 return;
}
int main(int argc,char *argv[])
{
 float *p;
 unsigned num;
 if (argc!=3)
 {
 printf("\nModo de uso: %s <fichero1> <fichero2>\n",argv[0]);
 return(1);
 }
 if ((p=LeerFichero(argv[1],&num))==NULL)
 return 1;
 QuickSort(p,0,num-1);
 GuardarFichero(argv[2],num,p);
 free(p);
 return 0;
}
